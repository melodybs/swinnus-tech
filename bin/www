#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('swinnus-tech:server');
var http = require('http');
//var https = require('https');

/**
 * Get port from environment and store in Express.
 */
/*var port;
if (process.env.NODE_ENV === 'production') {
  /*HTTPS 적용: greenlock-express, Let's Encrypt*
  const lex = require('greenlock-express').create({
    version: 'v02', // draft-11 버전 인증서 사,  letsencrypt 인증서 버전
    configDir: '/etc/letsencrypt', // 또는 ~/letsencrypt/etc, 발급받은 인증서 위치를 넣는 곳
    server: 'https://acme-v02.api.letsencrypt.org/directory',//production에서 변경했음. //staging을 넣어줍니다. 나중에 staging을 production 또는 https://acme-v01.api.letsencrypt.org/directory(?https://acme-v02.api.letsencrypt.org/directory)으로 바꿔줘야 합니다. staging은 테스트용 SSL을 만들어보는 것
    approveDomains: (opts, certs, cb) => { //도메인 이름들을 적어줍니다. 참고로 서브 도메인들은 다 적어줘야 합니다. www가 붙은 것도 서브도메인이기 때문에 넣어주어야 하고요. dev.example.com, api.example.com 등이 있다면 그것 또한 넣어줘야 합니다.
      if (certs) {
        opts.domains = ['swinnus-tech.tk', 'www.stechidle.cf', 'stechidle.cf'];
      } else {
        opts.email = 'melody_bs@naver.com';//나중에 만료 예정일 때 이 곳으로 이메일
        opts.agreeTos = true;//agreeTos는 true를 넣어줍니다. agreeTos는 약관 동의라고 생각하시면 됩니다.
      }
      cb(null, { options: opts, certs });
    },
    renewWithin: 81 * 24 * 60 * 60 * 1000, //renewWithin과 renewBy는 각각 인증서를 갱신할 최대 기간과 최소 기간을 뜻합니다. 80일과 81일 사이에(인증서의 수명은 90일) 갱신하도록 했습니다.
    renewBy: 80 * 24 * 60 * 60 * 1000,
  });

  port = normalizePort(process.env.SSL_PORT || 443);
} else {
  port = normalizePort(process.env.PORT || '80');
}*/
var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */
/*var server;
if (process.env.NODE_ENV === 'production') {
  server = https.createServer(lex.httpsOptions, lex.middleware(app));
} else {
  server = http.createServer(app);
}*/
var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* SCHAT */
var session = require('express-session');
var sessionMiddleware = session({
  resave: true,
  saveUninitialized: true,
  secret: process.env.COOKIE_SECRET, 
  cookie: { 
    httpOnly: true,
    secure: false,
  },
});

const webSocket = require('../socket/schat/socket');
webSocket(server, app, sessionMiddleware);
/* END SCHAT */

/* SAUCTION */
const sauctionSse = require('../sse/sauction/sse');
const sauctionWebSocket = require('../socket/sauction/socket');

sauctionWebSocket(server, app);
sauctionSse(server);
/* END SAUCTION */

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
